# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'HANDv1.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import os
import sys
os.environ["http_proxy"] = "http://127.0.0.1:7890"
os.environ["https_proxy"] = "http://127.0.0.1:7890"
import datetime as dt
import time
import threading

from PyQt5 import QtCore, QtWidgets
from PyQt5.QtWidgets import QApplication, QMainWindow
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QPixmap

from str2loc import gpt_name2pos
from guiding import main as guiding
from guiding import load_hourly_graph_files
from traj.inference import main as get_car_num

class Ui_HaveANiceDay(object):
    def setup_guiding(self,output_dir='hourly_graphs',):
        print('Loading graphs from ' + output_dir)
        hourly_graph_files = load_hourly_graph_files(output_dir)
        self.hourly_graph_files = hourly_graph_files[0]
        
    def setupUi(self, HaveANiceDay):
        
        # qt initializer
        HaveANiceDay.setObjectName("HaveANiceDay")
        HaveANiceDay.resize(1000, 900)
        self.buttonBox = QtWidgets.QDialogButtonBox(HaveANiceDay)
        self.buttonBox.setGeometry(QtCore.QRect(60, 130, 60, 120))
        self.buttonBox.setOrientation(QtCore.Qt.Vertical)
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.Ok)
        self.buttonBox.setObjectName("buttonBox")
        
        self.lineEdit_start = QtWidgets.QLineEdit(HaveANiceDay)
        self.lineEdit_start.setGeometry(QtCore.QRect(60, 40, 113, 21))
        self.lineEdit_start.setObjectName("lineEdit_start")
        self.lineEdit_start.setClearButtonEnabled(True)
        
        self.lineEdit_end = QtWidgets.QLineEdit(HaveANiceDay)
        self.lineEdit_end.setGeometry(QtCore.QRect(60, 70, 113, 21))
        self.lineEdit_end.setObjectName("lineEdit_end")
        self.lineEdit_end.setClearButtonEnabled(True)
        
        self.lineEdit_inputTime = QtWidgets.QLineEdit(HaveANiceDay)
        self.lineEdit_inputTime.setGeometry(QtCore.QRect(60, 100, 113, 21))
        self.lineEdit_inputTime.setObjectName("lineEdit_inputTime")
        self.lineEdit_inputTime.setClearButtonEnabled(True)
        self.lineEdit_inputTime.setPlaceholderText("h-m: eg:07-30")
        
        self.label= QtWidgets.QLabel(HaveANiceDay)
        self.label.setGeometry(QtCore.QRect(10, 10, 261, 26))
        self.label.setObjectName("label")
        self.label_start = QtWidgets.QLabel(HaveANiceDay)
        self.label_start.setGeometry(QtCore.QRect(10, 40, 31, 16))
        self.label_start.setObjectName("label_start")
        self.label_end = QtWidgets.QLabel(HaveANiceDay)
        self.label_end.setGeometry(QtCore.QRect(10, 70, 31, 16))
        self.label_end.setObjectName("label_end")
        self.label_input_time = QtWidgets.QLabel(HaveANiceDay)
        self.label_input_time.setGeometry(QtCore.QRect(10, 100, 31, 16))
        self.label_input_time.setObjectName("label_input_time")
        self.label_tripLengthFix = QtWidgets.QLabel(HaveANiceDay)
        self.label_tripLengthFix.setGeometry(QtCore.QRect(10, 230, 60, 16))
        self.label_tripLengthFix.setObjectName("label_tripLengthFix")
        self.label_tripTimeFix = QtWidgets.QLabel(HaveANiceDay)
        self.label_tripTimeFix.setGeometry(QtCore.QRect(10, 260, 60, 16))
        self.label_tripTimeFix.setObjectName("label_tripTimeFix")
        self.label_tripLengthOut = QtWidgets.QLabel(HaveANiceDay)
        self.label_tripLengthOut.setGeometry(QtCore.QRect(70, 230, 60, 16))
        self.label_tripLengthOut.setObjectName("label_tripLengthOut")
        self.label_tripTimeOut = QtWidgets.QLabel(HaveANiceDay)
        self.label_tripTimeOut.setGeometry(QtCore.QRect(70, 260, 60, 16))
        self.label_tripTimeOut.setObjectName("label_tripTimeOut")
        self.label_carsFix = QtWidgets.QLabel(HaveANiceDay)
        self.label_carsFix.setGeometry(QtCore.QRect(10, 290, 60, 16))
        self.label_carsFix.setObjectName("label_tripTimeOut")
        self.label_cars = QtWidgets.QLabel(HaveANiceDay)
        self.label_cars.setGeometry(QtCore.QRect(70, 290, 60, 16))
        self.label_cars.setObjectName("label_tripTimeOut")
        
        self.imageLabel = QtWidgets.QLabel(HaveANiceDay)
        self.imageLabel.setGeometry(QtCore.QRect(175, 33, 800, 800))
        self.imageLabel.setObjectName("imageLabel")
        self.imageLabel.setScaledContents(True)
        
        self.label_startWarning= QtWidgets.QLabel(HaveANiceDay)
        self.label_startWarning.setGeometry(QtCore.QRect(180, 40, 261, 16))
        self.label_startWarning.setObjectName("label_startWarning")
        self.label_endWarning= QtWidgets.QLabel(HaveANiceDay)
        self.label_endWarning.setGeometry(QtCore.QRect(180, 70, 261, 16))
        self.label_endWarning.setObjectName("label_endWarning")

        #functional
        self.retranslateUi(HaveANiceDay)
        self.buttonBox.accepted.connect(self.handle_accept) # type: ignore
        self.buttonBox.rejected.connect(self.handle_reject) # type: ignore
        QtCore.QMetaObject.connectSlotsByName(HaveANiceDay)
        
        # data loading
        self.setup_guiding(output_dir='hourly_graphs')
        
        print('All set, enjoy!')

    def retranslateUi(self, HaveANiceDay):
        _translate = QtCore.QCoreApplication.translate
        HaveANiceDay.setWindowTitle(_translate("HaveANiceDay", "Have A Nice Day"))
        self.label.setText(_translate("HaveANiceDay", "Have a nice day hand by HAND!"))
        self.label_start.setText(_translate("HaveANiceDay", "起点"))
        self.label_end.setText(_translate("HaveANiceDay", "终点"))
        self.label_input_time.setText(_translate("HaveANiceDay", "时间"))
        self.label_tripLengthFix.setText(_translate("HaveANiceDay", "里程:"))
        self.label_tripTimeFix.setText(_translate("HaveANiceDay", "用时:"))
        self.label_carsFix.setText(_translate("HaveANiceDay", "同行:"))
        
    def show_warning_start(self):
        self.label_startWarning.setText('GPT找不到这个地方,确认拼写!')
        
    def show_warning_end(self):
        self.label_endWarning.setText('GPT找不到这个地方,确认拼写!')
        
    def update_image(self, image_path):
        # 更新QLabel中的图片
        pixmap = QPixmap(image_path)
        self.imageLabel.setPixmap(pixmap)
        
    def handle_accept(self):
        print('Start a new request')
        self.clean_text()
        start = self.lineEdit_start.text()
        end = self.lineEdit_end.text()
        curr_time = self.lineEdit_inputTime.text()
        route_length, route_time, cars_num = self.pipeline(start, end, curr_time)
        self.update_image(os.path.join(self.request_dir,'route.png'))
        self.label_tripLengthOut.setText('{} km'.format(route_length))
        self.label_tripTimeOut.setText('{} min'.format(route_time))
        self.label_cars.setText('{} cars'.format(cars_num))
        print('request done!')
        
    def handle_reject(self):
        self.clean_text()
        
    def pipeline(self, start:str, end:str, curr_time:str):
        self.request_dir = os.path.join('requests',str(time.time()))
        os.makedirs(self.request_dir,exist_ok=True)
        if curr_time == '':
            curr_time = dt.datetime(2023, 4, 1, 15, 0)
        else:
            time_list = curr_time.split('-')
            h = int(time_list[0])
            m = int(time_list[1])
            print(h,m)
            curr_time =dt.datetime(2023, 4, 1, h, m)
        try:
            start_long, start_lat = gpt_name2pos(start)
        except:
            self.show_warning_start()
        try:
            end_long, end_lat = gpt_name2pos(end)
        except:
            self.show_warning_end()
        # start_lat, start_long = 22.5382, 113.9787
        # end_lat, end_long = 22.5333, 114.0557
        print("Calculating root, this may cost 1 min")
        thread1 = threading.Thread(target=self.navigator, 
                                   args=((start_lat, start_long),
                                         (end_lat, end_long),
                                         curr_time,
                                         self.request_dir,
                                         self.hourly_graph_files))
        thread2 = threading.Thread(target=self.car_num,args=(end_long, end_lat,curr_time))
        thread1.start()
        thread2.start()
        thread1.join()
        thread2.join()
        return int(self.route_length*1.6093//1000), int(self.route_time//60), int(self.cars_num)
    
    def navigator(self, origin, destination, start_time,request_dir, hourly_graph_files):
        self.route_length, self.route_time = guiding(origin,
                                                    destination,
                                                    start_time,
                                                    request_dir,
                                                    hourly_graph_files)
        
    
    
    def car_num(self, end_long, end_lat, time):
        self.cars_num = get_car_num(end_long, end_lat, time)
        
    def clean_text(self):
        self.imageLabel.setPixmap(QPixmap(''))
        self.label_tripLengthOut.setText('')
        self.label_tripTimeOut.setText('')
        self.label_startWarning.setText('')
        self.label_endWarning.setText('')
        self.label_cars.setText('')


if __name__ == '__main__':
    app = QApplication(sys.argv)    # 创建应用程序
    mainwindow = QMainWindow()      # 创建主窗口
    ui = Ui_HaveANiceDay()          # 调用中的主窗口
    ui.setupUi(mainwindow)          # 向主窗口添加控件
    mainwindow.show()               # 显示窗口
    sys.exit(app.exec_())           # 程序执行循环
